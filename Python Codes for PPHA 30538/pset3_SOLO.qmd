---
title: "30538 Problem Set 3: git Answer"
author: "Sijie Wu"
date: "2024-10-26"
format: 
  pdf:
    include-in-header: 
       text: |
         \usepackage{fvextra}
         \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
include-before-body:
  text: |
    \RecustomVerbatimEnvironment{verbatim}{Verbatim}{
      showspaces = false,
      showtabs = false,
      breaksymbolleft={},
      breaklines
    }
---
1. Late coins used this pset: **1**
2. Late coins left after submission: **3**

(applies only to the solo part) “This submission is my work alone and complies with the 30538 integrity policy.” Add your initials to indicate your agreement: **SW**

# SOLO 

## Learn git branching (15 points)
Go to https://learngitbranching.js.org. This is the best visual git explainer we know of.

1. Complete all the levels of main "Introduction Sequence". Report the commands needed to complete "Git rebase" with one line per command. 
```{bash} 
git commit
git commit

git branch bugFix
git checkout bugFix

git checkout -b bugFix
git commit
git checkout main
git commit
git merge bugFix

git checkout -b bugFix
git commit
git checkout main
git commit
git checkout bugFix
git rebase main
```

2. Complete all the levels of main "Ramping up". Report the commands needed to complete "Reversing changes in git" with one line per command. 
```{bash} 
git checkout C4

git checkout C4^

git checkout C6
git branch -f main
git checkout main~4
git branch -f bugFix
git checkout C1

git checkout pushed
git revert pushed
git checkout local
git reset local~1


```

3. Complete all the levels of remote "Push & Pull -- Git Remotes!". Report the commands needed to complete "Locked Main" with one line per command.
```{bash} 
git clone

git commit
git checkout o/main
git commit

git fetch

git pull

git commit
git commit
git clone
git checkout C1
git commit
git checkout main
git merge C4

git commit
git commit
git push

git clone
git fakeTeamwork
git commit
git fetch
git rebase o/main
git push

git reset --hard o/main
git checkout -b feature C2
git push origin feature
```

## Exercises

- Basic Staging and Branching (10-15)
1. [Exercise](https://github.com/eficode-academy/git-katas/blob/master/basic-staging/README.md). For your pset submission, tell us only the answer to the last question (22).
```
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   file.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	.DS_Store

no changes added to commit (use "git add" and/or "git commit -a")
(base) wsjsmac@WSJs-MacBook-Pro exercise % git restore file.txt
(base) wsjsmac@WSJs-MacBook-Pro exercise % git status
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)
	.DS_Store

nothing added to commit but untracked files present (use "git add" to track)
```

2. [Exercise](https://github.com/eficode-academy/git-katas/blob/master/basic-branching/README.md). For your pset submission, tell us only the output to the last question (18).
```
diff --git a/file1.txt b/file1.txt
deleted file mode 100644
index 4f6b644..0000000
--- a/file1.txt
+++ /dev/null
@@ -1 +0,0 @@
-Sijie WU
diff --git a/file2.txt b/file2.txt
deleted file mode 100644
index 96716fb..0000000
--- a/file2.txt
+++ /dev/null
@@ -1 +0,0 @@
-New
```

- Merging 
1. [Exercise](https://github.com/eficode-academy/git-katas/blob/master/ff-merge/README.md). After completing all the steps (1 through 12), run git log --oneline --graph --all and report the output.
```
* b6555b8 (HEAD -> master, feature/uppercase) Add content to greeting.txt
* bb5b16f Add file greeting.txt
```

2. [Exercise](https://github.com/eficode-academy/git-katas/blob/master/3-way-merge/README.md). Report the answer to step 11.
```
*   1705b0a (HEAD -> master) Merge branch 'greeting' xx the commit.
|\  
| * 0ff898f (greeting) HELLO
* | 09e661d readme info
|/  
* a2e201a Add content to greeting.txt
* 4eafce5 Add file greeting.txt
```

3. Identify the type of merge used in Q1 and Q2 of this exercise. In words, explain the difference between the two merge types, and describe scenarios where each type would be most appropriate.

Fast forward merge brings one branch into another branch, and we can safely delete the old one. No new commit is created. It is appropriate when there is no need to track when the change history occurs, and no other changes have been made to `main` while working on the feature branch.

Three way merge can help combine three or more branches into a single unified version. New commit is created. It is appropriate when team work occurs, and there are multiple contributors with those branches divergent from each other.


- Undo, Clean, and Ignore
1. [Exercise](https://github.com/eficode-academy/git-katas/blob/master/basic-revert/README.md). Report the answer to step 13.
```
commit 1bb5de540d092df7e1d29335e4ac3f9f3dcad1c3
Author: git-katas trainer bot <git-katas@example.com>
Date:   Sat Oct 26 16:35:46 2024 -0500

    Add credentials to repository

diff --git a/credentials.txt b/credentials.txt
new file mode 100644
index 0000000..8995708
--- /dev/null
+++ b/credentials.txt
@@ -0,0 +1 @@
+supersecretpassword
```

2. [Exercise](https://github.com/eficode-academy/git-katas/blob/master/basic-cleaning/README.md). Look up `git clean` since we haven't seen this before. For context, this example is about cleaning up compiled C code, but the same set of issues apply to random files generated by knitting a document or by compiling in Python. Report the terminal output from step 7. 
```
Removing README.txt~
Removing obj/
Removing src/myapp.c~
Removing src/oldfile.c~
```

1. [Exercise](https://github.com/eficode-academy/git-katas/blob/master/ignore/README.md). Report the answer to 15 ("What does git status say?") 
```
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	deleted:    file1.txt

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   .gitignore

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	.DS_Store
	file3.txt


```

